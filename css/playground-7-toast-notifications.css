/* ===================================================
   PLAYGROUND 7: TOAST NOTIFICATION SYSTEM
   ===================================================

   üéâ Welcome to the final challenge! You've mastered individual
   transitions, coordinated effects, and sophisticated interactions.
   Now you'll architect a complete notification system with complex
   state management.

   üçû THE PROFESSIONAL CHALLENGE:
   Toast notifications are everywhere in modern applications -
   success messages, error alerts, system updates. They must:
   - Enter smoothly without jarring the user
   - Provide clear visual hierarchy for different message types
   - Respond elegantly to user interaction
   - Exit gracefully when dismissed

   This is the kind of system that separates amateur websites from
   professional applications!

   üéØ LEARNING GOALS:
   - Design complete state transition systems
   - Master entrance and exit animation patterns
   - Coordinate multiple notification types with consistent timing
   - Build production-ready UI component interactions

   üìù YOUR FINAL MISSION:
   Create a notification system that feels as polished as the
   apps users interact with every day!

   ================================================= */

/* STEP 1: Understanding Toast Notification UX
   ===========================================

   üîç OBSERVE: Click the trigger buttons and watch the three toast notifications.

   Current problems:
   - Notifications appear/disappear instantly (jarring)
   - No smooth entrance or exit animations
   - Hover states don't provide helpful feedback
   - Missing the polished feel of professional apps

   Professional toast systems solve this with:
   - Smooth slide-in entrance when shown
   - Elegant slide-out exit when hidden
   - Hover states that provide interactive feedback
   - Consistent timing and easing across all message types
*/

/* STEP 2: Notification Container System
   =====================================

   The container positions notifications in a consistent location.
*/

.notification-demo {
  text-align: center;
  margin-bottom: 2rem;
}

.trigger-btn {
  background: linear-gradient(135deg, #74b9ff, #0984e3);
  color: white;
  border: none;
  padding: 0.8rem 1.5rem;
  border-radius: 8px;
  font-weight: 600;
  cursor: pointer;
  margin: 0 0.5rem;

  /* Smooth button transitions */
  transition: all 0.2s ease;
}

.trigger-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 8px rgba(116, 185, 255, 0.3);
}

.trigger-btn.warning-trigger {
  background: linear-gradient(135deg, #fdcb6e, #e17055);
}

.trigger-btn.error-trigger {
  background: linear-gradient(135deg, #fd79a8, #e84393);
}

/* STEP 2: Initial Hidden State - The .toast-closed Class
   ======================================================

   When toasts have the .toast-closed class, they should be completely hidden.
   This is the default state before being shown.
*/
.toast-notification.toast-closed {
  opacity: 0;
  transform: translateX(100%);
}

.toast-container {
  position: fixed;
  top: 20px;
  right: 20px;
  z-index: 1000;

  /* Stack notifications vertically */
  display: flex;
  flex-direction: column;
  gap: 1rem;

  /* Ensure notifications don't interfere with other content */
  pointer-events: none; /* Container doesn't block clicks */
}

/* STEP 3: Base Toast Notification Structure
   =========================================

   Each notification needs to work as a cohesive interactive unit.
*/

.toast-notification {
  /* Layout and sizing */
  display: flex;
  align-items: center;
  gap: 1rem;
  padding: 1rem;
  min-width: 300px;
  max-width: 400px;

  /* Visual styling */
  background: white;
  border-radius: 8px;
  border-left: 4px solid;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);

  /* Re-enable pointer events for individual notifications */
  pointer-events: auto;

  /* TODO #1: Add comprehensive transitions

     We'll be animating multiple properties for smooth show/hide:
     transition: opacity 0.3s ease, transform 0.3s ease, box-shadow 0.3s ease;

     This allows smooth transitions between .toast-closed and visible states.
  */
}

/* STEP 4: Toast Content Structure
   ===============================

   Clean typography hierarchy for scannable content.
*/

.toast-icon {
  font-size: 1.5rem;
  flex-shrink: 0; /* Icon doesn't shrink */
}

.toast-content {
  flex: 1; /* Takes up remaining space */
}

.toast-title {
  font-weight: 700;
  font-size: 1rem;
  margin-bottom: 0.25rem;
  color: #2c3e50;
}

.toast-message {
  font-size: 0.9rem;
  color: #64748b;
  line-height: 1.4;
  margin: 0;
}

.toast-close-button {
  background: none;
  border: none;
  font-size: 1.2rem;
  color: #94a3b8;
  cursor: pointer;
  padding: 0.25rem;
  border-radius: 4px;
  flex-shrink: 0;

  /* TODO #2: Add close button transition

     The close button should respond smoothly to interaction:
     transition: color 0.2s ease, background-color 0.2s ease;
  */
}

.toast-close-button:hover {
  /* TODO #3: Style close button hover

     Make the close button more prominent on hover:
     color: #64748b;
     background-color: #f1f5f9;
  */
}

/* STEP 5: Toast Type Styling
   ==========================

   Different message types get different visual treatment.
*/

.success-toast {
  border-left-color: #27ae60;
}

.success-toast .toast-icon {
  color: #27ae60;
}

.warning-toast {
  border-left-color: #f39c12;
}

.warning-toast .toast-icon {
  color: #f39c12;
}

.error-toast {
  border-left-color: #e74c3c;
}

.error-toast .toast-icon {
  color: #e74c3c;
}

/* STEP 6: The State Management Challenge
   =====================================

   üéØ GOAL: Design a complete state transition system that handles:
   - .toast-closed ‚Üí Visible (smooth entrance when class is removed)
   - Visible ‚Üí Hovered (user interaction feedback)
   - Visible ‚Üí .toast-closed (smooth exit when class is added)

   üí° TECHNIQUE HINTS:
   - Default state (.toast-closed): opacity: 0, translateX(100%)
   - Visible state (no .toast-closed): opacity: 1, translateX(0)
   - Hover state: enhanced box-shadow and subtle lift
   - Use transitions to animate between these states

   üîß YOUR ARCHITECTURAL TASK: Design smooth show/hide animations!
*/

/* STEP 7: Visible State - When .toast-closed is Removed
   =====================================================

   When the .toast-closed class is removed, toasts should be visible and positioned.
   Since .toast-closed sets opacity: 0 and translateX(100%), the visible state
   should reset these properties to show the toast normally.
*/

.toast-notification {
  /* TODO #4: Set the visible state properties

     When .toast-closed is removed, toasts should be:
     - Fully visible: opacity: 1;
     - In normal position: transform: translateX(0);

     Combined with transitions, this creates smooth slide-in from the right.
  */
}

/* STEP 8: Hover Interaction - Enhanced Feedback
   =============================================

   Professional toast notifications respond to hover with elevation and timing cues.
*/

.toast-notification:hover {
  /* TODO #5: Design hover elevation

     When users hover over notifications:
     - Add elevation: box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
     - Optional subtle lift: transform: translateY(-2px);

     This provides feedback that the notification is interactive.
  */
}

/* STEP 9: Hidden State - The .toast-closed Class (Already Defined Above)
   ======================================================================

   When notifications receive the .toast-closed class, they exit gracefully.
   We already defined this in STEP 2:
   - Fade out: opacity: 0;
   - Slide out to the right: transform: translateX(100%);

   Combined with transitions, this creates smooth slide-out animation.
*/

/* STEP 10: Experience the Complete System!
   ========================================

   üéâ SYSTEM INTEGRATION TIME: Complete TODOs #1-6:
   1. Add comprehensive transitions to .toast-notification
   2. Add close button transitions
   3. Style close button hover
   4. Set visible state properties (opacity: 1, translateX: 0)
   5. Design hover elevation
   6. Save and test!

   üß™ TESTING THE COMPLETE LIFECYCLE:
   - Click trigger buttons - do notifications slide in smoothly from the right?
   - Hover over notifications - do they feel interactive with elevation?
   - Click close buttons - do they slide out gracefully to the right?
   - All three notification types should behave consistently!

   The JavaScript in the HTML handles adding/removing the .toast-closed class
   when you click the trigger and close buttons.
*/

/* STEP 11: Advanced Professional Patterns
   =======================================

   Want to match production-quality notification systems?
*/

/* TODO #7: Auto-dismiss timing indication (Advanced)

   Some toast systems show a progress bar indicating auto-dismiss timing:

   .toast-notification:not(.toast-closed)::after {
     content: '';
     position: absolute;
     bottom: 0;
     left: 0;
     height: 3px;
     background: currentColor;
     width: 100%;
     transform: scaleX(0);
     transform-origin: left;
     transition: transform 5s linear;
   }

   .toast-notification:not(.toast-closed):hover::after {
     animation-play-state: paused;
   }

   This creates a progress bar that fills over 5 seconds when visible!
*/

/* TODO #8: Stacked notification spacing (Advanced)

   When multiple notifications appear, they should have consistent spacing:

   .toast-notification:not(:last-child) {
     margin-bottom: 1rem;
   }

   And maybe push older notifications up:

   .toast-notification:nth-child(n+4) {
     opacity: 0.8;
     transform: translateY(-10px) scale(0.95);
   }
*/

/* TODO #9: Different entrance directions (Advanced)

   Try different entrance animations for variety:

   SUCCESS (slide from right - default):
   .success-toast.toast-closed { transform: translateX(100%); }

   WARNING (slide from top):
   .warning-toast.toast-closed { transform: translateY(-100%); }

   ERROR (scale from center):
   .error-toast.toast-closed { transform: scale(0.8); opacity: 0; }
*/

/* EXPERIMENT ZONE! üß™
   ====================

   Try these variations to perfect your notification system:

   TODO #10: Different timing patterns
   - transition: all 0.2s ease; (snappy, responsive)
   - transition: all 0.5s ease; (smooth, contemplative)
   - transition: all 0.3s cubic-bezier(0.68, -0.55, 0.265, 1.55); (bouncy)

   TODO #11: Enhanced hover effects
   Add these to your :hover state:
   - cursor: default; (shows it's not clickable except for close)
   - transform: translateY(-4px) scale(1.02); (more dramatic lift)
   - backdrop-filter: blur(10px); (modern frosted glass effect)

   TODO #12: Notification priority levels
   Different visual hierarchy for different importance:

   .toast-notification.priority-high {
     border-left-width: 6px;
     box-shadow: 0 6px 16px rgba(231, 76, 60, 0.2);
   }

   .toast-notification.priority-low {
     opacity: 0.9;
     transform: scale(0.95);
   }

   TODO #13: Dark mode variant

   .toast-notification.dark {
     background: #2c3e50;
     color: #ecf0f1;
     box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
   }

   .toast-notification.dark .toast-title {
     color: #ecf0f1;
   }

   .toast-notification.dark .toast-message {
     color: #bdc3c7;
   }
*/

/* STEP 12: Real-World Toast Systems
   =================================

   Your notification system now matches patterns from:

   üíº BUSINESS APPLICATIONS:
   - Slack message confirmations
   - Figma save notifications
   - Gmail send confirmations
   - Notion page updates

   üõí E-COMMERCE PLATFORMS:
   - Shopping cart additions
   - Order confirmations
   - Stock alerts
   - Price drop notifications

   üéÆ GAMING INTERFACES:
   - Achievement unlocks
   - Level up notifications
   - Friend requests
   - System messages

   üì± MOBILE APP PATTERNS:
   - Instagram like notifications
   - WhatsApp message previews
   - Banking transaction alerts
   - Health app reminders
*/

/* STEP 13: Accessibility and UX Considerations
   ============================================

   SCREEN READERS: Toast notifications should be announced.
   In real implementations, add:
   - role="alert" for important messages
   - aria-live="polite" for non-critical updates
   - aria-describedby linking to message content

   KEYBOARD NAVIGATION: Close buttons should be focusable:

   .toast-close-button:focus {
     outline: 2px solid #74b9ff;
     outline-offset: 2px;
   }

   MOTION SENSITIVITY: Respect reduced motion preferences:

   @media (prefers-reduced-motion: reduce) {
     .toast-notification {
       transition: opacity 0.2s ease;
     }

     .toast-notification:not(.toast-closed) {
       opacity: 1;
       transform: none;
     }
   }

   AUTO-DISMISS TIMING:
   - Success: 4-5 seconds (positive, can be quick)
   - Warning: 6-8 seconds (needs consideration time)
   - Error: Stay until dismissed (critical information)
*/

/* DEBUGGING SECTION üîß
   =====================

   Common toast notification issues:

   ‚ùå "My notifications don't slide in!"
   ‚úÖ Check: Are you removing the .toast-closed class? Is the initial
      hidden state (opacity: 0, translateX: 100%) set correctly?

   ‚ùå "Animations feel choppy or laggy!"
   ‚úÖ Try: Shorter transition durations (0.2s) or use transform
      properties only (avoid changing width/height)

   ‚ùå "Notifications overlap or stack weirdly!"
   ‚úÖ Check: Is the toast-container using proper flexbox settings?
      Are notifications positioned correctly?

   ‚ùå "Close buttons don't feel responsive!"
   ‚úÖ Ensure: Hover states have sufficient color/background changes
      and quick transition timing (0.2s max)

   ‚ùå "The system doesn't feel cohesive!"
   ‚úÖ Check: Are all notifications using the same transition timing?
      Do they all follow the same entrance/exit patterns?

   üéâ SUCCESS INDICATORS:
   - Smooth, consistent entrance animations
   - Clear visual hierarchy between message types
   - Responsive hover and close button interactions
   - Graceful exit animations
   - Professional polish that matches production apps
*/

/* üéâ FINAL CONGRATULATIONS!
   =========================

   You've completed the ultimate CSS transitions challenge!

   üèÜ MASTER-LEVEL ACHIEVEMENTS UNLOCKED:
   ‚úÖ Complete state transition system architecture
   ‚úÖ Professional notification UI patterns
   ‚úÖ Complex multi-property animation coordination
   ‚úÖ Production-ready component interaction design
   ‚úÖ Accessibility integration in complex systems

   From this single playground, you've learned techniques used in:
   - Enterprise software interfaces
   - Modern web applications
   - Mobile app notification systems
   - Real-time communication platforms

   üöÄ YOUR TRANSITION MASTERY JOURNEY:

   Playground 1-2: State selector foundations
   Playground 3-4: Multi-property coordination and creativity
   Playground 5-6: Professional patterns and visual sophistication
   Playground 7: Complete system architecture and polish

   You started with basic button hovers and now you can architect
   complete interactive systems that feel as polished as the
   professional applications users interact with every day!

   üéØ WHAT'S NEXT?
   - Combine these techniques with JavaScript for dynamic interactions
   - Explore CSS animations with @keyframes for more complex sequences
   - Study real-world applications to see these patterns in action
   - Build your own component libraries using these foundations

   You now possess professional-level CSS transition skills.
   Go forth and make the web more delightful! ‚ö°‚ú®
*/
