/* ===================================================
   PLAYGROUND 4: THE RAINBOW CASCADE
   ===================================================

   Time for something magical! You've mastered basic transitions
   and multi-property effects. Now you'll learn how to coordinate
   multiple elements with STAGGERED TIMING.

   üåà THE VISION:
   When you hover over this rainbow, each stripe should grow taller
   in a beautiful cascading wave - like a sound equalizer responding
   to music, or ripples spreading across water.

   This playground teaches advanced transition choreography that
   you'll use for everything from loading animations to interactive
   data visualizations!

   üéØ LEARNING GOALS:
   - Master transition-delay for staggered effects
   - Coordinate multiple elements in sequence
   - Create engaging, playful interactions
   - Build intuition for advanced timing patterns

   üìù YOUR MISSION:
   Turn this static rainbow into a dynamic, wave-like experience!

   ================================================= */

/* STEP 1: Understanding the Current Rainbow
   =========================================

   üîç OBSERVE: Look at the rainbow in your browser and hover over it.

   Current state: Just a pretty static rainbow.
   Missing magic: No response to interaction, no sense of life or energy.

   We're going to transform this into something delightful that makes
   users smile and want to hover repeatedly!
*/

/* STEP 2: Rainbow Container Setup
   ===============================

   The container holds all the stripes and detects our hover trigger.
*/

.rainbow-container {
  display: flex;
  align-items: end; /* Align stripes to bottom */
  justify-content: center;
  height: 200px;
  padding: 2rem;
  cursor: pointer;

  /* Add some breathing room */
  gap: 8px;
}

/* STEP 3: Individual Rainbow Stripe Base Styles
   =============================================

   Each stripe starts as a different color but same size.
   Notice how we're setting up the base properties that will change.
*/

.rainbow-stripe {
  /* Size and shape */
  width: 30px;
  height: 60px; /* This will grow on hover! */
  border-radius: 15px 15px 0 0; /* Rounded tops */

  /* Prepare for animations */
  transform-origin: bottom; /* Scale from the bottom */

  /* TODO #1: Add the base transition

     We'll be animating the height and transform properties.
     Add this line:

     transition: height 0.4s ease, transform 0.4s ease;

     Notice we're using 0.4s - slightly slower than buttons/cards
     because this is a playful effect, not a UI interaction.
  */
}

/* STEP 4: Rainbow Colors
   ======================

   Each stripe gets its own beautiful color!
*/

.stripe-1 {
  background: linear-gradient(to top, #e74c3c, #c0392b);
} /* Red */
.stripe-2 {
  background: linear-gradient(to top, #f39c12, #d68910);
} /* Orange */
.stripe-3 {
  background: linear-gradient(to top, #f1c40f, #d4ac0d);
} /* Yellow */
.stripe-4 {
  background: linear-gradient(to top, #27ae60, #229954);
} /* Green */
.stripe-5 {
  background: linear-gradient(to top, #3498db, #2980b9);
} /* Blue */
.stripe-6 {
  background: linear-gradient(to top, #9b59b6, #8e44ad);
} /* Indigo */
.stripe-7 {
  background: linear-gradient(to top, #e91e63, #ad1457);
} /* Violet */

/* STEP 5: The Hover Challenge - Create the Wave!
   ==============================================

   Here's your creative problem-solving challenge!

   üéØ GOAL: When hovering the container, make each stripe grow taller
   in a cascading sequence - like a wave moving across the rainbow.

   üí° TECHNIQUE HINTS:
   - Use .rainbow-container:hover .rainbow-stripe to target all stripes
   - height property controls how tall each stripe is
   - transition-delay controls WHEN each stripe starts animating
   - Each stripe should have a different delay to create the cascade

   üîß YOUR TASK: Complete the hover effects below!
*/

.rainbow-container:hover .rainbow-stripe {
  /* TODO #2: Make all stripes grow when the container is hovered

     When someone hovers over the rainbow container, all stripes
     should grow taller. Try:

     height: 120px;

     This doubles their height! You could also try transform: scaleY(2);
     for a similar effect, but height is more dramatic for this demo.
  */
}

/* STEP 6: The Magic of Staggered Delays
   =====================================

   Now comes the beautiful part - making each stripe start its
   animation at a different time to create the cascade effect!

   üí° KEY CONCEPT: transition-delay
   This property waits a specified time before starting the transition.

   Example: transition-delay: 0.1s; means "wait 0.1 seconds, then animate"
*/

.rainbow-container:hover .stripe-1 {
  /* TODO #3: First stripe starts immediately */
  /* transition-delay: 0s; */
}

.rainbow-container:hover .stripe-2 {
  /* TODO #4: Second stripe waits a bit */
  /* transition-delay: 0.1s; */
}

.rainbow-container:hover .stripe-3 {
  /* TODO #5: Third stripe waits longer */
  /* transition-delay: 0.2s; */
}

.rainbow-container:hover .stripe-4 {
  /* TODO #6: Fourth stripe waits even longer */
  /* transition-delay: 0.3s; */
}

.rainbow-container:hover .stripe-5 {
  /* TODO #7: Fifth stripe continues the pattern */
  /* transition-delay: 0.4s; */
}

.rainbow-container:hover .stripe-6 {
  /* TODO #8: Sixth stripe near the end */
  /* transition-delay: 0.5s; */
}

.rainbow-container:hover .stripe-7 {
  /* TODO #9: Last stripe completes the wave */
  /* transition-delay: 0.6s; */
}

/* STEP 7: Experience the Wave!
   ============================

   üéâ TESTING TIME: Complete TODOs #1-9:
   1. Add the base transition to .rainbow-stripe
   2. Set the hover height in .rainbow-container:hover .rainbow-stripe
   3. Uncomment all the transition-delay lines
   4. Save and test!

   üåà MAGICAL MOMENT: Hover over your rainbow and watch the wave!

   Amazing, right? Each stripe grows in sequence, creating a
   beautiful cascading effect. This is the power of coordinated timing!

   üîÑ TRY THIS: Hover repeatedly and watch the wave flow. Notice how
   it works in BOTH directions - entering AND leaving the hover state!
*/

/* STEP 8: Understanding Cascade Timing
   ====================================

   Why does this cascade effect work so well?

   üß† HUMAN PERCEPTION:
   - Our brains love sequential patterns and rhythm
   - Staggered timing feels organic and natural
   - It creates anticipation as we watch the wave progress
   - The effect feels purposeful, not random

   ‚è±Ô∏è TIMING MATHEMATICS:
   - 7 stripes with 0.1s delay between each
   - Total cascade duration: 0.6s (from first to last stripe starting)
   - Each stripe's animation: 0.4s duration
   - Total effect time: 0.6s + 0.4s = 1.0s to complete

   üéµ MUSICAL ANALOGY:
   Think of this like a musical chord where notes start at different
   times - it creates richness and complexity from simple elements.
*/

/* EXPERIMENT ZONE! üß™
   ====================

   Now that you have the basic cascade working, explore variations:

   TODO #10: Different cascade speeds
   Try changing ALL the delay values:

   FAST CASCADE (snappy):
   - .stripe-1: 0s, .stripe-2: 0.05s, .stripe-3: 0.1s, etc.

   SLOW CASCADE (dramatic):
   - .stripe-1: 0s, .stripe-2: 0.2s, .stripe-3: 0.4s, etc.

   REVERSE CASCADE (wave goes right to left):
   - .stripe-1: 0.6s, .stripe-2: 0.5s, .stripe-3: 0.4s, etc.

   TODO #11: Different animation durations
   Try these in your base .rainbow-stripe transition:
   - transition: height 0.2s ease, transform 0.2s ease; (quick)
   - transition: height 0.8s ease, transform 0.8s ease; (slow)
   - transition: height 0.6s ease-out, transform 0.6s ease-out; (bouncy)

   TODO #12: Different height changes
   In your hover state, try:
   - height: 100px; (subtle growth)
   - height: 150px; (dramatic growth)
   - height: 80px; (shrinking instead of growing - weird but interesting!)

   TODO #13: Add scaling effects
   Combine height with transform scaling:

   .rainbow-container:hover .rainbow-stripe {
     height: 120px;
     transform: scaleX(1.2);
   }

   TODO #14: Different timing functions
   Try these for different feels:
   - ease-in (builds momentum)
   - ease-out (bouncy landing)
   - ease-in-out (smooth start and stop)
   - cubic-bezier(0.68, -0.55, 0.265, 1.55) (bouncy overshoot!)
*/

/* STEP 9: Advanced Cascade Patterns
   =================================

   Want to get really creative? Try these advanced patterns:
*/

/* TODO #15: Bidirectional cascade (Advanced)

   Make the wave go from both ends toward the middle:

   .rainbow-container:hover .stripe-1 { transition-delay: 0.3s; }
   .rainbow-container:hover .stripe-2 { transition-delay: 0.2s; }
   .rainbow-container:hover .stripe-3 { transition-delay: 0.1s; }
   .rainbow-container:hover .stripe-4 { transition-delay: 0s; }  // Center first!
   .rainbow-container:hover .stripe-5 { transition-delay: 0.1s; }
   .rainbow-container:hover .stripe-6 { transition-delay: 0.2s; }
   .rainbow-container:hover .stripe-7 { transition-delay: 0.3s; }
*/

/* TODO #16: Color shifting cascade (Advanced)

   Make colors shift as the wave passes:

   .rainbow-container:hover .stripe-1 { filter: brightness(1.3); }
   .rainbow-container:hover .stripe-2 { filter: brightness(1.3); }
   // ... etc for all stripes

   Add filter to your base transition:
   transition: height 0.4s ease, transform 0.4s ease, filter 0.4s ease;
*/

/* STEP 10: Real-World Applications
   ================================

   This staggered timing technique is used everywhere:

   üéµ AUDIO VISUALIZERS:
   - Music apps use similar cascading bars
   - Each bar responds to different frequency ranges
   - Creates the classic "equalizer" effect

   üìä DATA ANIMATIONS:
   - Chart bars that grow in sequence when loading
   - Progress indicators that fill one after another
   - Loading animations with staggered dots or bars

   üéÆ GAME INTERFACES:
   - Menu items that slide in one by one
   - Achievement notifications that stack with delays
   - Power-ups that activate in sequence

   üåê WEB INTERACTIONS:
   - Card grids where items fade in with staggered delays
   - Navigation menus that expand item by item
   - Search results that appear in waves

   üì± MOBILE APPS:
   - List items that slide in as you scroll
   - Notification badges that pulse in sequence
   - Onboarding steps that highlight one by one
*/

/* STEP 11: Accessibility and Performance Notes
   ============================================

   MOTION SENSITIVITY: Some users prefer reduced motion.
   In real projects, you'd add:

   @media (prefers-reduced-motion: reduce) {
     .rainbow-stripe {
       transition: none;
     }
   }

   PERFORMANCE: Height changes can cause layout recalculation.
   For better performance in production, consider:
   - Using transform: scaleY() instead of height
   - Using opacity changes for fade cascades
   - Keeping cascade groups to reasonable sizes (under 20 elements)

   TIMING CONSIDERATIONS:
   - Total cascade duration under 2 seconds for good UX
   - Individual delays under 0.5s to maintain engagement
   - Consistent mathematical progression (0.1s, 0.2s, 0.3s...)
*/

/* DEBUGGING SECTION üîß
   =====================

   Common cascade timing issues:

   ‚ùå "My cascade doesn't work!"
   ‚úÖ Check: Is the transition on the base .rainbow-stripe element?
      Are the delays on the :hover states?

   ‚ùå "All stripes animate at the same time!"
   ‚úÖ Check: Did you uncomment the transition-delay lines?
      Are the delay values different for each stripe?

   ‚ùå "The effect feels too slow/fast!"
   ‚úÖ Adjust: Either the base transition duration or the delay intervals

   ‚ùå "The wave goes in the wrong direction!"
   ‚úÖ Check: Are your delays in ascending order (0s, 0.1s, 0.2s...)
      or descending order (0.6s, 0.5s, 0.4s...)?

   ‚ùå "The effect looks choppy!"
   ‚úÖ Try: Smoother timing functions like ease-out or ease-in-out

   üéâ SUCCESS INDICATORS:
   - Beautiful wave cascades across the rainbow on hover
   - Each stripe starts animating at a different time
   - The effect works smoothly in both directions
   - Makes you want to hover repeatedly because it's so satisfying!
*/

/* üéâ CONGRATULATIONS!
   ===================

   You've mastered advanced transition choreography!

   You now understand:
   ‚úÖ How transition-delay creates staggered effects
   ‚úÖ Coordinating multiple elements in sequence
   ‚úÖ Mathematical timing relationships
   ‚úÖ Creative applications of basic transition properties

   This rainbow cascade uses the EXACT same techniques as:
   - Loading spinners with sequential dots
   - Chart animations that build bar by bar
   - Menu items that slide in one after another
   - Card grids that fade in with staggered timing

   You've learned to think like an interaction designer, considering
   not just individual elements but how they work together to create
   engaging, delightful experiences!

   Ready to get back to serious business? Let's build a professional
   pricing card system! üí≥‚ú®
*/
